<?xml version="1.0" encoding="utf-8"?>
<resources>
    <declare-styleable name="waveSideBar">
        <attr name="backgroundColor" format="color|reference"/>
        <attr name="chooseTextColor" format="color|reference"/>
        <attr name="textSize" format="dimension"/>
        <attr name="hintTextSize" format="dimension"/>
        <attr name="radius" format="dimension"/>
        <attr name="circleRadius" format="dimension"/>
    </declare-styleable>
    <declare-styleable name="PullToZoomView">
        <attr name="headerView" format="reference" />
        <attr name="contentView" format="reference" />
        <attr name="zoomView" format="reference" />
        <attr name="isHeaderParallax" format="boolean" />
    </declare-styleable>

    <attr name="absListViewStyle" format="reference" />
    <attr name="listViewStyle" format="reference" />

    <declare-styleable name="MultiColumnListView">
        <attr name="plaColumnNumber" format="integer" />
        <attr name="plaLandscapeColumnNumber" format="integer" />
        <attr name="plaColumnPaddingLeft" format="dimension" />
        <attr name="plaColumnPaddingRight" format="dimension" />
    </declare-styleable>
    <declare-styleable name="PullToRefreshView">
        <attr name="ptrHeight" format="dimension" />
        <attr name="ptrSpinnerMarginRight" format="dimension" />
        <attr name="ptrArrowMarginRight" format="dimension" />
        <attr name="ptrTextSize" format="dimension" />
        <attr name="ptrLastUpdateTextSize" format="dimension" />
    </declare-styleable>

    <declare-styleable name="View">

        <attr name="id" format="reference" />


        <attr name="tag" format="string" />

        <!-- The initial horizontal scroll offset, in pixels. -->
        <attr name="scrollX" format="dimension" />

        <!-- The initial vertical scroll offset, in pixels. -->
        <attr name="scrollY" format="dimension" />


        <attr name="padding" format="dimension" />
        <!-- Sets the padding, in pixels, of the left edge; see {@link android.R.attr#padding}. -->
        <attr name="paddingLeft" format="dimension" />
        <!-- Sets the padding, in pixels, of the top edge; see {@link android.R.attr#padding}. -->
        <attr name="paddingTop" format="dimension" />
        <!-- Sets the padding, in pixels, of the right edge; see {@link android.R.attr#padding}. -->
        <attr name="paddingRight" format="dimension" />
        <!-- Sets the padding, in pixels, of the bottom edge; see {@link android.R.attr#padding}. -->
        <attr name="paddingBottom" format="dimension" />
        <!-- Sets the padding, in pixels, of the start edge; see {@link android.R.attr#padding}. -->


        <attr name="focusable" format="boolean" />

        <attr name="focusableInTouchMode" format="boolean" />

        <!-- Controls the initial visibility of the view. -->
        <attr name="visibility">

            <!-- Visible on screen; the default value. -->
            <enum name="visible" value="0" />
            <!-- Not displayed, but taken into account during layout (space is left for it). -->
            <enum name="invisible" value="1" />
            <!-- Completely hidden, as if the view had not been added. -->
            <enum name="gone" value="2" />
        </attr>

        <attr name="fitsSystemWindows" format="boolean" />

        <!-- Defines which scrollbars should be displayed on scrolling or not. -->
        <attr name="scrollbars">

            <!-- No scrollbar is displayed. -->
            <flag name="none" value="0x00000000" />
            <!-- Displays horizontal scrollbar only. -->
            <flag name="horizontal" value="0x00000100" />
            <!-- Displays vertical scrollbar only. -->
            <flag name="vertical" value="0x00000200" />
        </attr>

        <attr name="scrollbarStyle">

            <!-- Inside the padding and overlaid -->
            <enum name="insideOverlay" value="0x0" />
            <!-- Inside the padding and inset -->
            <enum name="insideInset" value="0x01000000" />
            <!-- Edge of the view and overlaid -->
            <enum name="outsideOverlay" value="0x02000000" />
            <!-- Edge of the view and inset -->
            <enum name="outsideInset" value="0x03000000" />
        </attr>

        <attr name="isScrollContainer" format="boolean" />

        <!-- Defines whether to fade out scrollbars when they are not in use. -->
        <attr name="fadeScrollbars" format="boolean" />
        <!-- Defines the delay in milliseconds that a scrollbar takes to fade out. -->
        <attr name="scrollbarFadeDuration" format="integer" />
        <!-- Defines the delay in milliseconds that a scrollbar waits before fade out. -->
        <attr name="scrollbarDefaultDelayBeforeFade" format="integer" />
        <!-- Sets the width of vertical scrollbars and height of horizontal scrollbars. -->
        <attr name="scrollbarSize" format="dimension" />
        <!-- Defines the horizontal scrollbar thumb drawable. -->
        <attr name="scrollbarThumbHorizontal" format="reference" />
        <!-- Defines the vertical scrollbar thumb drawable. -->
        <attr name="scrollbarThumbVertical" format="reference" />
        <!-- Defines the horizontal scrollbar track drawable. -->
        <attr name="scrollbarTrackHorizontal" format="reference" />
        <!-- Defines the vertical scrollbar track drawable. -->
        <attr name="scrollbarTrackVertical" format="reference" />
        <!-- Defines whether the horizontal scrollbar track should always be drawn. -->
        <attr name="scrollbarAlwaysDrawHorizontalTrack" format="boolean" />
        <!-- Defines whether the vertical scrollbar track should always be drawn. -->
        <attr name="scrollbarAlwaysDrawVerticalTrack" format="boolean" />

        <attr name="fadingEdge">

            <!-- No edge is faded. -->
            <flag name="none" value="0x00000000" />
            <!-- Fades horizontal edges only. -->
            <flag name="horizontal" value="0x00001000" />
            <!-- Fades vertical edges only. -->
            <flag name="vertical" value="0x00002000" />
        </attr>
        <!-- Defines which edges should be faded on scrolling. -->
        <attr name="requiresFadingEdge">

            <!-- No edge is faded. -->
            <flag name="none" value="0x00000000" />
            <!-- Fades horizontal edges only. -->
            <flag name="horizontal" value="0x00001000" />
            <!-- Fades vertical edges only. -->
            <flag name="vertical" value="0x00002000" />
        </attr>
        <!-- Defines the length of the fading edges. -->
        <attr name="fadingEdgeLength" format="dimension" />

        <attr name="nextFocusLeft" format="reference" />

        <attr name="nextFocusRight" format="reference" />

        <attr name="nextFocusUp" format="reference" />

        <attr name="nextFocusDown" format="reference" />


        <attr name="nextFocusForward" format="reference" />

        <!-- Defines whether this view reacts to click events. -->
        <attr name="clickable" format="boolean" />

        <!-- Defines whether this view reacts to long click events. -->
        <attr name="longClickable" format="boolean" />

        <attr name="saveEnabled" format="boolean" />

        <attr name="filterTouchesWhenObscured" format="boolean" />

        <attr name="drawingCacheQuality">

            <!--
                 Lets the framework decide what quality level should be used
                 for the drawing cache.
            -->
            <enum name="auto" value="0" />
            <!--
                 Low quality. When set to low quality, the drawing cache uses a lower color
                 depth, thus losing precision in rendering gradients, but uses less memory.
            -->
            <enum name="low" value="1" />
            <!--
                 High quality. When set to high quality, the drawing cache uses a higher
                 color depth but uses more memory.
            -->
            <enum name="high" value="2" />
        </attr>

        <!--
             Controls whether the view's window should keep the screen on
             while visible.
        -->
        <attr name="keepScreenOn" format="boolean" />

        <!--
             When this attribute is set to true, the view gets its drawable state
             (focused, pressed, etc.) from its direct parent rather than from itself.
        -->
        <attr name="duplicateParentState" format="boolean" />

        <!--
             Defines the minimum height of the view. It is not guaranteed
             the view will be able to achieve this minimum height (for example,
             if its parent layout constrains it with less available height).
        -->
        <attr name="minHeight" format="dimension" />

        <!--
             Defines the minimum width of the view. It is not guaranteed
             the view will be able to achieve this minimum width (for example,
             if its parent layout constrains it with less available width).
        -->
        <attr name="minWidth" format="dimension" />

        <!--
             Boolean that controls whether a view should have sound effects
             enabled for events such as clicking and touching.
        -->
        <attr name="soundEffectsEnabled" format="boolean" />

        <!--
             Boolean that controls whether a view should have haptic feedback
             enabled for events such as long presses.
        -->
        <attr name="hapticFeedbackEnabled" format="boolean" />

        <!--
             Defines text that briefly describes content of the view. This property is used
             primarily for accessibility. Since some views do not have textual
             representation this attribute can be used for providing such.
        -->
        <attr name="contentDescription" format="string" localization="suggested" />

        <!--
             Name of the method in this View's context to invoke when the view is
             clicked. This name must correspond to a public method that takes
             exactly one parameter of type View. For instance, if you specify
             <code>android:onClick="sayHello"</code>, you must declare a
             <code>public void sayHello(View v)</code> method of your context
             (typically, your Activity).
        -->
        <attr name="onClick" format="string" />

        <!--
             Defines over-scrolling behavior. This property is used only if the
             View is scrollable. Over-scrolling is the ability for the user to
             receive feedback when attempting to scroll beyond meaningful content.
        -->
        <attr name="overScrollMode">

            <!--
                 Always show over-scroll effects, even if the content fits entirely
                 within the available space.
            -->
            <enum name="always" value="0" />
            <!--
                 Only show over-scroll effects if the content is large
                 enough to meaningfully scroll.
            -->
            <enum name="ifContentScrolls" value="1" />
            <!-- Never show over-scroll effects. -->
            <enum name="never" value="2" />
        </attr>

        <!--
             alpha property of the view, as a value between 0 (completely transparent) and 1
             (completely opaque).
        -->
        <attr name="alpha" format="float" />

        <!--
             translation in x of the view. This value is added post-layout to the left
             property of the view, which is set by its layout.
        -->
        <attr name="translationX" format="dimension" />

        <!--
             translation in y of the view. This value is added post-layout to the left
             property of the view, which is set by its layout.
        -->
        <attr name="translationY" format="dimension" />

        <!--
             x location of the pivot point around which the view will rotate and scale.
             This xml attribute sets the pivotX property of the View.
        -->
        <attr name="transformPivotX" format="dimension" />

        <!--
             y location of the pivot point around which the view will rotate and scale.
             This xml attribute sets the pivotY property of the View.
        -->
        <attr name="transformPivotY" format="dimension" />

        <!-- rotation of the view, in degrees. -->
        <attr name="rotation" format="float" />

        <!-- rotation of the view around the x axis, in degrees. -->
        <attr name="rotationX" format="float" />

        <!-- rotation of the view around the y axis, in degrees. -->
        <attr name="rotationY" format="float" />

        <!-- scale of the view in the x direction. -->
        <attr name="scaleX" format="float" />

        <!-- scale of the view in the y direction. -->
        <attr name="scaleY" format="float" />

        <!-- Determines which side the vertical scroll bar should be placed on. -->
        <attr name="verticalScrollbarPosition">

            <!-- Place the scroll bar wherever the system default determines. -->
            <enum name="defaultPosition" value="0" />
            <!-- Place the scroll bar on the left. -->
            <enum name="left" value="1" />
            <!-- Place the scroll bar on the right. -->
            <enum name="right" value="2" />
        </attr>

        <!--
             Specifies the type of layer backing this view. The default value is none.
             Refer to {@link android.view.View#setLayerType(int, android.graphics.Paint)}
             for more information.
        -->
        <attr name="layerType">

            <!-- Don't use a layer. -->
            <enum name="none" value="0" />
            <!--
                 Use a software layer. Refer to
                 {@link android.view.View#setLayerType(int, android.graphics.Paint) for
                 more information.
            -->
            <enum name="software" value="1" />
            <!--
                 Use a hardware layer. Refer to
                 {@link android.view.View#setLayerType(int, android.graphics.Paint) for
                 more information.
            -->
            <enum name="hardware" value="2" />
        </attr>

        <!--
             Defines the direction of layout drawing. This typically is associated with writing
             direction of the language script used. The possible values are "ltr" for Left-to-Right,
             "rtl" for Right-to-Left, "locale" and "inherit" from parent view. If there is nothing
             to inherit, "locale" is used. "locale" falls back to "en-US". "ltr" is the direction
             used in "en-US". The default for this attribute is "inherit".
        -->
        <attr name="layoutDirection">

            <!-- Left-to-Right -->
            <enum name="ltr" value="0" />
            <!-- Right-to-Left -->
            <enum name="rtl" value="1" />
            <!-- Inherit from parent -->
            <enum name="inherit" value="2" />
            <!-- Locale -->
            <enum name="locale" value="3" />
        </attr>

        <!--
             Direction of the text. A heuristic is used to determine the resolved text direction
             of paragraphs.
        -->
        <attr name="textDirection" format="integer">

            <!-- Default -->
            <enum name="inherit" value="0" />
            <!--
                 Default for the root view. The first strong directional character determines the
                 paragraph direction.  If there is no strong directional character, the paragraph
                 direction is the view’s resolved layout direction.
            -->
            <enum name="firstStrong" value="1" />
            <!--
                 The paragraph direction is RTL if it contains any strong RTL character, otherwise
                 it is LTR if it contains any strong LTR characters.  If there are neither, the
                 paragraph direction is the view’s resolved layout direction.
            -->
            <enum name="anyRtl" value="2" />
            <!-- The paragraph direction is left to right. -->
            <enum name="ltr" value="3" />
            <!-- The paragraph direction is right to left. -->
            <enum name="rtl" value="4" />
            <!-- The paragraph direction is coming from the system Locale. -->
            <enum name="locale" value="5" />
        </attr>

        <!--
             Alignment of the text. A heuristic is used to determine the resolved
            text alignment.
        -->
        <attr name="textAlignment" format="integer">

            <!-- Default -->
            <enum name="inherit" value="0" />
            <!--
                 Default for the root view. The gravity determines the alignment, ALIGN_NORMAL,
                ALIGN_CENTER, or ALIGN_OPPOSITE, which are relative to each paragraph’s
                text direction
            -->
            <enum name="gravity" value="1" />
            <!-- Align to the start of the paragraph, e.g. ALIGN_NORMAL. -->
            <enum name="textStart" value="2" />
            <!-- Align to the end of the paragraph, e.g. ALIGN_OPPOSITE. -->
            <enum name="textEnd" value="3" />
            <!-- Center the paragraph, e.g. ALIGN_CENTER. -->
            <enum name="center" value="4" />
            <!--
                 Align to the start of the view, which is ALIGN_LEFT if the view’s resolved
                layoutDirection is LTR, and ALIGN_RIGHT otherwise.
            -->
            <enum name="viewStart" value="5" />
            <!--
                 Align to the end of the view, which is ALIGN_RIGHT if the view’s resolved
                layoutDirection is LTR, and ALIGN_LEFT otherwise
            -->
            <enum name="viewEnd" value="6" />
        </attr>

        <!--
             Controls how this View is important for accessibility which is if it fires
             accessibility events and if it is reported to accessibility services that
             query the screen. Note: While not recommended, an accessibility service may
             decide to ignore this attribute and operate on all views in the view tree.
        -->
        <attr name="importantForAccessibility" format="integer">

            <!--
                 The system determines whether the view is important for accessibility - default
                 (recommended).
            -->
            <enum name="auto" value="0" />
            <!-- The view is important for accessibility. -->
            <enum name="yes" value="1" />
            <!-- The view is not important for accessibility. -->
            <enum name="no" value="2" />
        </attr>

        <!-- @hide Controls whether this view can take accessibility focus. -->
        <attr name="accessibilityFocusable" format="integer">

            <!--
                 The system determines whether the view can take accessibility focus - default
                 (recommended).
                 <p>
                 Such a view is consideted by the focus search if it is:
                 <ul>
                 <li>
                 Important for accessibility and actionable (clickable, long clickable, focusable)
                 </li>
                 <li>
                 Important for accessibility, not actionable (clickable, long clickable, focusable),
                 and does not have an actionable predecessor.
                 </li>
                 </ul>
                 An accessibility srvice can request putting accessibility focus on such a view.
                 </p>
            -->
            <enum name="auto" value="0" />
            <!--
                 The view can take accessibility focus.
                 <p>
                 A view that can take accessibility focus is always considered during focus
                 search and an accessibility service can request putting accessibility focus
                 on it.
                 </p>
            -->
            <enum name="yes" value="1" />
            <!--
                 The view can not take accessibility focus.
                 <p>
                 A view that can not take accessibility focus is never considered during focus
                 search and an accessibility service can not request putting accessibility focus
                 on it.
                 </p>
            -->
            <enum name="no" value="2" />
        </attr>
    </declare-styleable>

    <!--
         Attributes that can be used with a {@link android.view.ViewGroup} or any
         of its subclasses.  Also see {@link #ViewGroup_Layout} for
         attributes that this class processes in its children.
    -->
    <declare-styleable name="ViewGroup">

        <!--
             Defines whether changes in layout (caused by adding and removing items) should
             cause a LayoutTransition to run. When this flag is set to true, a default
             LayoutTransition object will be set on the ViewGroup container and default
             animations will run when these layout changes occur.
        -->
        <attr name="animateLayoutChanges" format="boolean" />
        <!--
             Defines whether a child is limited to draw inside of its bounds or not.
             This is useful with animations that scale the size of the children to more
             than 100% for instance. In such a case, this property should be set to false
             to allow the children to draw outside of their bounds. The default value of
             this property is true.
        -->
        <attr name="clipChildren" format="boolean" />
        <!--
             Defines whether the ViewGroup will clip its drawing surface so as to exclude
             the padding area. This property is set to true by default.
        -->
        <attr name="clipToPadding" format="boolean" />
        <!--
             Defines the layout animation to use the first time the ViewGroup is laid out.
             Layout animations can also be started manually after the first layout.
        -->
        <attr name="layoutAnimation" format="reference" />
        <!--
             Defines whether layout animations should create a drawing cache for their
             children. Enabling the animation cache consumes more memory and requires
             a longer initialization but provides better performance. The animation
             cache is enabled by default.
        -->
        <attr name="animationCache" format="boolean" />
        <!--
             Defines the persistence of the drawing cache. The drawing cache might be
             enabled by a ViewGroup for all its children in specific situations (for
             instance during a scrolling.) This property lets you persist the cache
             in memory after its initial usage. Persisting the cache consumes more
             memory but may prevent frequent garbage collection is the cache is created
             over and over again. By default the persistence is set to scrolling.
        -->
        <attr name="persistentDrawingCache">

            <!-- The drawing cache is not persisted after use. -->
            <flag name="none" value="0x0" />
            <!-- The drawing cache is persisted after a layout animation. -->
            <flag name="animation" value="0x1" />
            <!-- The drawing cache is persisted after a scroll. -->
            <flag name="scrolling" value="0x2" />
            <!-- The drawing cache is always persisted. -->
            <flag name="all" value="0x3" />
        </attr>
        <!--
             Defines whether the ViewGroup should always draw its children using their
             drawing cache or not. The default value is true.
        -->
        <attr name="alwaysDrawnWithCache" format="boolean" />
        <!--
             Sets whether this ViewGroup's drawable states also include
             its children's drawable states.  This is used, for example, to
             make a group appear to be focused when its child EditText or button
             is focused.
        -->
        <attr name="addStatesFromChildren" format="boolean" />

        <!--
             Defines the relationship between the ViewGroup and its descendants
             when looking for a View to take focus.
        -->
        <attr name="descendantFocusability">

            <!-- The ViewGroup will get focus before any of its descendants. -->
            <enum name="beforeDescendants" value="0" />
            <!-- The ViewGroup will get focus only if none of its descendants want it. -->
            <enum name="afterDescendants" value="1" />
            <!-- The ViewGroup will block its descendants from receiving focus. -->
            <enum name="blocksDescendants" value="2" />
        </attr>

        <!--
             Sets whether this ViewGroup should split MotionEvents
             to separate child views during touch event dispatch.
             If false (default), touch events will be dispatched to
             the child view where the first pointer went down until
             the last pointer goes up.
             If true, touch events may be dispatched to multiple children.
             MotionEvents for each pointer will be dispatched to the child
             view where the initial ACTION_DOWN event happened.
             See {@link android.view.ViewGroup#setMotionEventSplittingEnabled(boolean)}
             for more information.
        -->
        <attr name="splitMotionEvents" format="boolean" />
    </declare-styleable>
    <declare-styleable name="AbsListView">

        <!-- Drawable used to indicate the currently selected item in the list. -->
        <attr name="listSelector" format="color|reference" />
        <!--
             When set to true, the selector will be drawn over the selected item.
             Otherwise the selector is drawn behind the selected item. The default
             value is false.
        -->
        <attr name="drawSelectorOnTop" format="boolean" />
        <!-- Used by ListView and GridView to stack their content from the bottom. -->
        <attr name="stackFromBottom" format="boolean" />
        <!--
             When set to true, the list uses a drawing cache during scrolling.
             This makes the rendering faster but uses more memory. The default
             value is true.
        -->
        <attr name="scrollingCache" format="boolean" />
        <!--
             When set to true, the list will filter results as the user types. The
             List's adapter must support the Filterable interface for this to work.
        -->
        <attr name="textFilterEnabled" format="boolean" />
        <!--
             Sets the transcript mode for the list. In transcript mode, the list
             scrolls to the bottom to make new items visible when they are added.
        -->
        <attr name="transcriptMode">

            <!-- Disables transcript mode. This is the default value. -->
            <enum name="disabled" value="0" />
            <!--
                 The list will automatically scroll to the bottom when
                 a data set change notification is received and only if the last item is
                 already visible on screen.
            -->
            <enum name="normal" value="1" />
            <!--
                 The list will automatically scroll to the bottom, no matter what items
                 are currently visible.
            -->
            <enum name="alwaysScroll" value="2" />
        </attr>
        <!--
             Indicates that this list will always be drawn on top of solid, single-color
             opaque background. This allows the list to optimize drawing.
        -->
        <attr name="cacheColorHint" format="color" />
        <!--
             Enables the fast scroll thumb that can be dragged to quickly scroll through
             the list.
        -->
        <attr name="fastScrollEnabled" format="boolean" />
        <!--
             When set to true, the list will use a more refined calculation
             method based on the pixels height of the items visible on screen. This
             property is set to true by default but should be set to false if your adapter
             will display items of varying heights. When this property is set to true and
             your adapter displays items of varying heights, the scrollbar thumb will
             change size as the user scrolls through the list. When set to fale, the list
             will use only the number of items in the adapter and the number of items visible
             on screen to determine the scrollbar's properties.
        -->
        <attr name="smoothScrollbar" format="boolean" />
        <!--
             Defines the choice behavior for the view. By default, lists do not have
             any choice behavior. By setting the choiceMode to singleChoice, the list
             allows up to one item to be in a chosen state. By setting the choiceMode to
             multipleChoice, the list allows any number of items to be chosen.
             Finally, by setting the choiceMode to multipleChoiceModal the list allows
             any number of items to be chosen in a special selection mode.
             The application will supply a
             {@link android.widget.AbsListView.MultiChoiceModeListener} using
             {@link android.widget.AbsListView#setMultiChoiceModeListener} to control the
             selection mode. This uses the {@link android.view.ActionMode} API.
        -->
        <attr name="choiceMode">

            <!-- Normal list that does not indicate choices. -->
            <enum name="none" value="0" />
            <!-- The list allows up to one choice. -->
            <enum name="singleChoice" value="1" />
            <!-- The list allows multiple choices. -->
            <enum name="multipleChoice" value="2" />
            <!-- The list allows multiple choices in a custom selection mode. -->
            <enum name="multipleChoiceModal" value="3" />
        </attr>

        <!--
             When set to true, the list will always show the fast scroll interface.
             This setting implies fastScrollEnabled.
        -->
        <attr name="fastScrollAlwaysVisible" format="boolean" />
    </declare-styleable>

    <declare-styleable name="ListView">

        <!-- Drawable or color to draw between list items. -->
        <!-- <attr name="divider" format="reference|color" /> -->
        <!--
             Height of the divider. Will use the intrinsic height of the divider if this
             is not specified.
        -->
        <attr name="dividerHeight" format="dimension" />
        <!--
             When set to false, the ListView will not draw the divider after each header view.
             The default value is true.
        -->
        <attr name="headerDividersEnabled" format="boolean" />
        <!--
             When set to false, the ListView will not draw the divider before each footer view.
             The default value is true.
        -->
        <attr name="footerDividersEnabled" format="boolean" />
        <!-- Drawable to draw above list content. -->
        <attr name="overScrollHeader" format="reference|color" />
        <!-- Drawable to draw below list content. -->

        <attr name="overScrollFooter" format="reference|color" />
    </declare-styleable>
    <declare-styleable name="StickyScrollView">
        <attr name="stuckShadowHeight" format="dimension" />
        <attr name="stuckShadowDrawable" format="reference" />
    </declare-styleable>

    <declare-styleable name="GifView">
        <attr name="gif" format="reference" />
        <attr name="paused" format="boolean" />
    </declare-styleable>
    <declare-styleable name="CustomTheme">
        <attr name="gifViewStyle" format="reference" />
    </declare-styleable>

    <declare-styleable name="SlidingTabLayout">
        <attr name="indicatorColor" format="color"/>
        <attr name="colorPrimary" format="color"/>
        <attr name="shouldExpand" format="boolean" />
        <attr name="tabBackground" format="reference" />
        <attr name="tabBackgroundTextViewId" format="reference"/>
    </declare-styleable>

    <declare-styleable name="MarqueeViewStyle">
        <attr name="mvInterval" format="integer|reference"/>
        <attr name="mvAnimDuration" format="integer|reference"/>
        <attr name="mvTextSize" format="dimension|reference"/>
        <attr name="mvTextColor" format="color|reference"/>
        <attr name="mvSingleLine" format="boolean"/>
        <attr name="mvGravity">
            <enum name="left" value="0"/>
            <enum name="center" value="1"/>
            <enum name="right" value="2"/>
        </attr>
    </declare-styleable>

    <declare-styleable name="CornerLabelView">
        <attr name="clvPaddingTop" format="dimension"/>
        <attr name="clvPaddingCenter" format="dimension"/>
        <attr name="clvPaddingBottom" format="dimension"/>

        <attr name="clvText1" format="string"/>
        <attr name="clvText1Color" format="color"/>
        <attr name="clvText1Height" format="dimension"/>

        <attr name="clvText2" format="string"/>
        <attr name="clvText2Color" format="color"/>
        <attr name="clvText2Height" format="dimension"/>

        <attr name="clvFillColor" format="color"/>
        <attr name="clvFlags" format="integer">
            <flag name="none" value="0"/>
            <flag name="right" value="1"/>
            <flag name="bottom" value="2"/>
            <flag name="triangle" value="4"/>
        </attr>
    </declare-styleable>
    <style name="CornerLabelView">
    </style>

    <style name="CornerLabelView.Default">
        <item name="android:layout_width">wrap_content</item>
        <item name="android:layout_height">wrap_content</item>

        <item name="clvPaddingTop">10dp</item>
        <item name="clvPaddingCenter">3dp</item>
        <item name="clvPaddingBottom">3dp</item>
    </style>

</resources>